import re
import urllib.parse as urlparse

import requests
from bs4 import BeautifulSoup
from colorama import init, Fore, Style

from decode_handler import decode_values


class Scanner:
    def __init__(self, url: str, links: list[str], username: str, password: str):
        init()
        self.session = requests.Session()
        self.target_url = url
        self.target_links = links
        self.target_forms_sql_injection = []
        self.username = username
        self.password = password

    def login(self, login_form, data_login):
        """Logs into the application using the provided login form and data."""
        self.session.post(login_form, data=data_login)

    def extract_forms(self, url: str):
        """Extracts all forms from the given URL."""
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features='lxml')
        return parsed_html.findAll("form")

    def submit_form(self, form, value: dict | str, url: str):
        """Submits a form with the given value to the given URL."""
        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")

        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value

        if method == 'post':
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        """Runs the CSRF vulnerability scanner."""
        for link in self.target_links:
            forms = self.extract_forms(link)
            self.test_forms_for_csrf(forms, link)

    def test_forms_for_csrf(self, forms, link):
        """Tests a list of forms for CSRF vulnerability."""
        for form in forms:
            print(f"[+] Testing form in: {link}")
            is_vulnerable_to = self.test_csrf(form=form, url=link)
            if is_vulnerable_to:
                self.target_forms_sql_injection.append((link, form))
                print(f"\n{Fore.CYAN}[***] 💉 Discovered in: {link}{Style.RESET_ALL}\n")
                print(f"{Fore.YELLOW}[***] 💉 Payload: \n\"{is_vulnerable_to}\"{Style.RESET_ALL}\n")
                print(f"{Fore.GREEN}Form: {Style.RESET_ALL} \n{form}")
                print("=" * 50)

    def extract_form_values(self, form):
        """Extracts the CSRF token and username value from a form."""
        csrf_input = form.find('input', {'name': 'csrf_token'})
        username_input = form.find('input', {'name': 'username'})

        csrf_token = csrf_input.get('value') if csrf_input else None
        username_value = username_input.get('value') if username_input else None

        return csrf_token, username_value

    def test_csrf(self, form, url: str):
        """Tests a form for CSRF vulnerability."""
        csrf_token, username_value = self.extract_form_values(form)
        form_html = str(form)
        form_with_csrf = form_html.replace('value=""', f'value="{csrf_token}"')
        normal_response = self.submit_form(form=BeautifulSoup(form_with_csrf, 'html.parser'), value={"username": username_value}, url=url)
        form_without_csrf = form_html.replace(f'value="{csrf_token}"', 'value=""')
        response_without_csrf = self.submit_form(form=BeautifulSoup(form_without_csrf, 'html.parser'), value={"username": username_value}, url=url)

        if response_without_csrf.status_code != normal_response.status_code or response_without_csrf.text != normal_response.text:
            print("The form may be vulnerable to CSRF attacks.")

        elif not self.action_performed(url, self.username, self.password):
            print("The form appears to be protected against CSRF attacks.")

        else:
            print("The form is not vulnerable to CSRF attacks.")

    def action_performed(self, url, username, new_password):
        """Checks if the action (e.g., password change) was performed."""
        login_form = self.extract_forms(url)[0]  # assuming the login form is the first form on the page
        response = self.submit_form(form=login_form, value={"username": username, "password": new_password}, url=url)
        return "Login successful" in response.text  # replace "Login successful" with the success message in your web application


if __name__ == '__main__':
    target_url = "http://10.0.2.12/dvwa/"
    login_url = f"{target_url}/login.php"
    security_url = f"{target_url}/security.php"

    target_links = [
        "http://10.0.2.12/dvwa/vulnerabilities/csrf/",
    ]

    new_password_test = 'new_password'

    authorization_in_login_form = {
        "username": 'admin',
        "password": 'password',
        "Login": 'submit',
    }

    vulnerability_scanner = Scanner(target_url, target_links, authorization_in_login_form["username"], new_password_test)
    vulnerability_scanner.login(login_url, authorization_in_login_form)

    print("\033[1;32m\nVulnerability Scanner Starts 🧐 ==> \033[0m")
    vulnerability_scanner.run_scanner()
