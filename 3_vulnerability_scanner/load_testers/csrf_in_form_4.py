import urllib.parse as urlparse

import requests
from bs4 import BeautifulSoup
from colorama import init, Fore, Style


class Scanner:
    def __init__(self, url: str, links: list[str], username: str, password: str):
        init()
        self.session = requests.Session()
        self.target_url = url
        self.target_links = links
        self.target_forms_csrf = []
        self.username = username
        self.password = password

    def login(self, login_form, data_login):
        """Logs into the application using the provided login form and data."""
        self.session.post(login_form, data=data_login)

    def extract_forms(self, url: str):
        """Extracts all forms from the given URL."""
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features='lxml')
        return parsed_html.findAll("form")

    def submit_form(self, form, value: dict | str, url: str):
        """Submits a form with the given value to the given URL."""
        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")

        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value

        if method == 'post':
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        """Runs the CSRF vulnerability scanner."""
        for link in self.target_links:
            forms = self.extract_forms(link)
            self.test_forms_for_csrf(forms, link)

    def test_forms_for_csrf(self, forms, link):
        """Tests a list of forms for CSRF vulnerability."""
        for form in forms:
            print(f"[+] Testing form in: {link}")
            is_vulnerable_to = self.test_csrf(form=form, url=link)
            print(f"{Fore.YELLOW}[***] 💉 Payload: \n\"{is_vulnerable_to}\"{Style.RESET_ALL}\n")
            if is_vulnerable_to[0]:
                self.target_forms_csrf.append((link, form))
                print(f"\n{Fore.CYAN}[***] 💉 Discovered in: {link}{Style.RESET_ALL}\n")
                print(f"{Fore.YELLOW}[***] 💉 Payload: \n\"{is_vulnerable_to}\"{Style.RESET_ALL}\n")
                print(f"{Fore.GREEN}Form: {Style.RESET_ALL} \n{form}")
                print("=" * 50)

    def extract_form_values(self, form):
        """Extracts the CSRF token and username value from a form."""
        csrf_input = form.find('input', {'name': 'csrf_token'})
        username_input = form.find('input', {'name': 'username'})

        csrf_token = csrf_input.get('value') if csrf_input else None
        username_value = username_input.get('value') if username_input else None

        return csrf_token, username_value

    def test_csrf(self, form, url: str):
        """Tests a form for CSRF vulnerability and returns the result."""
        csrf_token, username_value = self.extract_form_values(form)
        print(f"{csrf_token} *** {username_value}")
        form_html = str(form)

        # Test form with CSRF token
        form_with_csrf = self.replace_csrf_token_in_form(form_html, csrf_token)
        normal_response = self.submit_form(form=BeautifulSoup(form_with_csrf, 'html.parser'),
                                           value={"username": username_value}, url=url)

        # Test form without CSRF token
        form_without_csrf = self.replace_csrf_token_in_form(form_html, '')
        response_without_csrf = self.submit_form(form=BeautifulSoup(form_without_csrf, 'html.parser'),
                                                 value={"username": username_value}, url=url)

        return self.evaluate_test_results(normal_response, response_without_csrf, url, form)

    def replace_csrf_token_in_form(self, form_html, csrf_token):
        """Replaces the CSRF token in the form HTML with the given CSRF token."""
        return form_html.replace('value=""', f'value="{csrf_token}"')

    def evaluate_test_results(self, normal_response, response_without_csrf, url, form):
        """Evaluates the test results and returns the result."""
        if response_without_csrf.status_code != normal_response.status_code or response_without_csrf.text != normal_response.text:
            return True, url, form
        elif not self.action_performed(url, self.username, self.password):
            return False, None, None
        else:
            return False, None, None

    def action_performed(self, url, username, new_password):
        """Checks if the action (e.g., password change) was performed."""
        login_form = self.extract_forms(url)[0]  # assuming the login form is the first form on the page
        response = self.submit_form(form=login_form, value={"username": username, "password": new_password}, url=url)

        # List of possible success messages
        success_messages = [
            "Login successful",
            "Successfully logged in",
            "Welcome back",
            "Access granted",
            "Authentication successful",
            "Logged in successfully",
            "Login complete",
            "You are now logged in",
            "Welcome, you're logged in",
            "Sign-in successful"
        ]

        # Check if any of the success messages is in the response text
        return any(message in response.text for message in success_messages)


if __name__ == '__main__':
    target_url = "http://10.0.2.12/dvwa/"
    login_url = f"{target_url}/login.php"
    security_url = f"{target_url}/security.php"

    target_links = [
        "http://10.0.2.12/dvwa/vulnerabilities/csrf/",
    ]

    new_password_test = 'new_password'

    authorization_in_login_form = {
        "username": 'admin',
        "password": 'password',
        "Login": 'submit',
    }

    vulnerability_scanner = Scanner(target_url, target_links, authorization_in_login_form["username"],
                                    new_password_test)
    vulnerability_scanner.login(login_url, authorization_in_login_form)

    print("\033[1;32m\nVulnerability Scanner Starts 🧐 ==> \033[0m")
    vulnerability_scanner.run_scanner()
