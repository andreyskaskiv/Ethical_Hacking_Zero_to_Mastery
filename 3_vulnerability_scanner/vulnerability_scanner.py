import re
import urllib.parse
import urllib.parse as urlparse

import requests
from bs4 import BeautifulSoup
from colorama import init, Fore, Style

from handlers.decode_handler import decode_values
from handlers.file_handler import write_data_to_file, write_forms_to_file
from vulnerability_check.check_for_vulnerability_to_xss import (test_xss_in_form,
                                                                test_xss_in_link)
from vulnerability_check.check_for_vulnerability_to_command_exec import test_command_execution_in_form
from vulnerability_check.check_for_vulnerability_to_html_injection import test_html_injection_in_form
from vulnerability_check.check_for_vulnerability_to_sql_injection import test_sql_injection_in_form
from vulnerability_check.check_for_vulnerability_to_csrf import test_csrf_injection_in_form


class Scanner:
    def __init__(self, url: str, ignore_links: list[str]):
        """
        :param url: target url
        :param ignore_links: a list with ignored links, for example, so as not to lose the session
        """
        init()
        self.session = requests.Session()
        self.target_url = url
        self.ignore_links = ignore_links

        self.target_links = []
        self.target_forms_XSS = []
        self.target_links_XSS = []
        self.target_forms_command_exec = []
        self.target_forms_html_injection = []
        self.target_forms_sql_injection = []
        self.target_forms_csrf_injection = []

    def login(self, login_form, data_login):
        self.session.post(login_form, data=data_login)

    def set_security_level(self, url, data_level):
        response = self.session.post(url, data=data_level)
        answer = decode_values(response.content)
        pattern = r"<b>Security Level:</b> (.*?)<br />"
        matches = re.findall(pattern, answer, re.DOTALL)
        return matches

    def extract_links_from(self, url: str):
        """Extract links from the target site using regular expressions"""
        response = self.session.get(url)
        answer = decode_values(response.content)
        return re.findall('(?:href=")(.*?)"', answer)

    def crawl(self, url=None):
        """Link Refactor. Removes duplicates. Removes links not related to the target site."""
        if url is None:
            url = self.target_url

        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urllib.parse.urljoin(url, link)

            if "#" in link:
                link = link.split("#")[0]

            if (self.target_url in link
                    and link not in self.target_links
                    and link not in self.ignore_links):
                self.target_links.append(link)
                print(link)

                self.crawl(link)

    def extract_forms(self, url: str):
        """This function is used to extract all the forms from a webpage specified by the input URL."""
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features='lxml')  # features='html.parser' features='lxml'
        return parsed_html.findAll("form")

    def submit_form(self, form, value: dict | str, url: str):
        """
        Extract all required attributes from forms. Fill out and submit the form
        :param form: Specify the form you want to submit
        :param value: The value we want to set for the inputs in this form
        :param url: Url address of the page from which we retrieved this form
        :return:
        """

        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")

        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")

            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value

        if method == 'post':
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        """Check each link in the target_links list, extract forms from those links.
         Check forms and links for vulnerabilities"""
        for link in self.target_links:
            forms = self.extract_forms(link)

            for form in forms:
                print(f"[ ] Testing form in: {link}")

                is_vulnerable_to_xss = test_xss_in_form(self, form=form, url=link)
                if is_vulnerable_to_xss:
                    self.target_forms_XSS.append((link, form, is_vulnerable_to_xss))
                    self.show_info(link=link, is_vulnerable_to=is_vulnerable_to_xss, form=form)

                is_vulnerable_to_command_exec = test_command_execution_in_form(self, form=form, url=link)
                if is_vulnerable_to_command_exec:
                    self.target_forms_command_exec.append((link, form, is_vulnerable_to_command_exec))
                    self.show_info(link=link, is_vulnerable_to=is_vulnerable_to_command_exec, form=form)

                is_vulnerable_to_html = test_html_injection_in_form(self, form=form, url=link)
                if is_vulnerable_to_html:
                    self.target_forms_html_injection.append((link, form, is_vulnerable_to_html))
                    self.show_info(link=link, is_vulnerable_to=is_vulnerable_to_html, form=form)

                is_vulnerable_to_sql_injection = test_sql_injection_in_form(self, form=form, url=link)
                if is_vulnerable_to_sql_injection:
                    self.target_forms_sql_injection.append((link, form, is_vulnerable_to_sql_injection))
                    self.show_info(link=link, is_vulnerable_to=is_vulnerable_to_sql_injection, form=form)

                is_vulnerable_to_csrf_injection = test_csrf_injection_in_form(self, form=form, url=link)
                if is_vulnerable_to_csrf_injection[0]:
                    self.target_forms_csrf_injection.append((link, form))
                    self.show_info(link=link, is_vulnerable_to=is_vulnerable_to_csrf_injection, form=form)

            if link.endswith('/'):
                """Add and call a method if a LINK vulnerability is found"""
                print(f"[ ] Testing Link: {link}")
                is_vulnerable_to_xss = test_xss_in_link(self, link)
                if is_vulnerable_to_xss:
                    self.target_links_XSS.append((link, is_vulnerable_to_xss))
                    self.show_info(link=link, is_vulnerable_to=is_vulnerable_to_xss)

    @classmethod
    def show_info(cls, link, is_vulnerable_to=None, form=None):
        if is_vulnerable_to:
            print(f"{Fore.CYAN}[+] ðŸ’‰ Discovered in: {link}{Style.RESET_ALL}\n")
            print(f"{Fore.YELLOW}[***] ðŸ’‰ Payload: \n\"{is_vulnerable_to}\"{Style.RESET_ALL}\n")
            if form:
                print(f"{Fore.GREEN}Form: {Style.RESET_ALL} \n{form}")
            print("=" * 50)

    def write_target_links(self, write_file: str):
        print(write_data_to_file(self.target_links, write_file))

    def write_target_forms_xss(self, write_file: str):
        print(write_forms_to_file(self.target_forms_XSS, write_file))

    def write_target_forms_command_exec(self, write_file: str):
        print(write_forms_to_file(self.target_forms_command_exec, write_file))

    def write_target_forms_html_injection(self, write_file: str):
        print(write_forms_to_file(self.target_forms_html_injection, write_file))

    def write_target_forms_sql_injection(self, write_file: str):
        print(write_forms_to_file(self.target_forms_sql_injection, write_file))

    def write_target_forms_csrf_injection(self, write_file: str):
        print(write_forms_to_file(self.target_forms_csrf_injection, write_file))

    def write_target_links_xss(self, write_file: str):
        print(write_data_to_file(self.target_links_XSS, write_file))
